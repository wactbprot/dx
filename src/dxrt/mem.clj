(ns dxrt.mem)

(defonce mem (atom {}))

;; ....................................................................................................
;; utils
;; ....................................................................................................
(defn states [v f] (mapv (fn [vv] (mapv (fn [vvv] (mapv f vvv)) vv)) v))
(defn ctrls [v f] (mapv f v))

;; ....................................................................................................
;; all in, all out
;; ....................................................................................................
(defn add-mpd [{id :_id mpd :Mp}] (swap! mem assoc (keyword id) mpd))
(defn del-mpd [id] (swap! mem dissoc id))

;; ....................................................................................................
;; container (cont)
;; ....................................................................................................
(defn conts       [id] (get-in @mem [id :Container]))
(defn cont-defs   [id] (mapv :Definition (conts id)))
(defn cont-titles [id] (mapv :Title (conts id)))

;; ....................................................................................................
;; definitions (defi)
;; ....................................................................................................
(defn defis     [id] (get-in @mem [id :Definitions]))
(defn defi-defs [id] (mapv :Definition ))

;; ....................................................................................................
;; exchange (exch)
;; ....................................................................................................
(defn exch [id] (get-in @mem [id :Exchange]))

;; ....................................................................................................
;; states
;; ....................................................................................................
(defn cont-states [id] (states (cont-defs id) (constantly :ini)))
(defn defi-states [id] (states (defi-defs id) (constantly :ini)))

;; ....................................................................................................
;; ctrls
;; ....................................................................................................
(defn cont-ctrls [id] (ctrls (cont-defs id) (constantly :ini)))
(defn defi-ctrls [id] (ctrls (defi-defs id) (constantly :ini)))

